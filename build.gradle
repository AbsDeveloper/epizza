import org.gradle.tooling.GradleConnector
import org.gradle.tooling.connection.GradleConnection

private openCompositeConnection() {
    def shared   = file("shared")
    def bakery   = file("bakery")
    def delivery = file("delivery")

    def gradleHome = project.gradle.gradleHomeDir

    def builder = GradleConnector.newGradleConnection()
    builder.addParticipant(shared).useInstallation(gradleHome)
    builder.addParticipant(bakery).useInstallation(gradleHome)
    builder.addParticipant(delivery).useInstallation(gradleHome)
    builder.useInstallation(gradleHome)

    // Switch to disable (experimental) dependency substitution
    def integrated = project.hasProperty('integrated') ? Boolean.valueOf(project.property("integrated") as String) : true
    builder.integratedComposite(integrated)

    return builder.build()
}

task build << {
    def connection = openCompositeConnection()
    try {
        executeTask(connection, "shared", ":build")
        executeTask(connection, "bakery", ":build")
        executeTask(connection, "delivery", ":build")
    } finally {
        connection.close()
    }
}

private executeTask(GradleConnection connection, String participant, String... tasks) {
    logger.lifecycle("Running tasks ${tasks} in participant: ${participant}")
    def rootDir = file("${participant}")
    def buildLauncher = connection.newBuild()
    buildLauncher.forTasks(rootDir, tasks)
    buildLauncher.standardOutput = System.out
    buildLauncher.standardError = System.err
    buildLauncher.run()
}

